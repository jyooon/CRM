/**
 * DevExtreme (ui/form/instance_storage.js)
 * Version: 18.2.6
 * Build date: Tue Feb 05 2019
 *
 * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _createClass = function() {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) {
                descriptor.writable = true
            }
            Object.defineProperty(target, descriptor.key, descriptor)
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) {
            defineProperties(Constructor.prototype, protoProps)
        }
        if (staticProps) {
            defineProperties(Constructor, staticProps)
        }
        return Constructor
    }
}();
var _guid = require("../../core/guid");
var _guid2 = _interopRequireDefault(_guid);
var _iterator = require("../../core/utils/iterator");

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function")
    }
}
var InstanceStorage = function() {
    function InstanceStorage() {
        _classCallCheck(this, InstanceStorage);
        this._storage = {}
    }
    _createClass(InstanceStorage, [{
        key: "_find",
        value: function(condition) {
            var resultInstance;
            (0, _iterator.each)(this._storage, function(guid, _ref) {
                var instance = _ref.instance,
                    item = _ref.item;
                if (condition(item)) {
                    resultInstance = instance;
                    return false
                }
            });
            return resultInstance
        }
    }, {
        key: "clear",
        value: function() {
            this._storage = {}
        }
    }, {
        key: "add",
        value: function(item, instance, guid) {
            guid = guid || new _guid2.default;
            this._storage[guid] = {
                item: item,
                instance: instance
            };
            return guid
        }
    }, {
        key: "extend",
        value: function(instanceStorage) {
            var _this = this;
            instanceStorage.each(function(instance, item, guid) {
                if (_this._storage[guid]) {
                    _this._storage[guid].instance = instance
                } else {
                    _this.add(item, instance, guid)
                }
            })
        }
    }, {
        key: "findByItem",
        value: function(item) {
            return this._find(function(storedItem) {
                return storedItem === item
            })
        }
    }, {
        key: "findByName",
        value: function(name) {
            return this._find(function(item) {
                return name === item.name
            })
        }
    }, {
        key: "findByDataField",
        value: function(dataField) {
            return this._find(function(item) {
                return dataField === item.dataField
            })
        }
    }, {
        key: "each",
        value: function(handler) {
            (0, _iterator.each)(this._storage, function(guid, _ref2) {
                var instance = _ref2.instance,
                    item = _ref2.item;
                if (instance) {
                    handler(instance, item, guid)
                }
            })
        }
    }]);
    return InstanceStorage
}();
exports.default = InstanceStorage;
